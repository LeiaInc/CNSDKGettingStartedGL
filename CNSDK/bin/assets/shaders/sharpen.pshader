// Compatibility definitions to make HLSL/GLSL work with minimal changes
#if USE_HLSL == 1

#define uniform /**/

#define InTexCoord input.Tex

#else

#define float2 vec2
#define float3 vec3
#define float4 vec4
#define float4x4 mat4
#define fmod mod
#define lerp mix

#define InTexCoord TexCoord

#endif

// Shader input/output signatures
#if USE_HLSL == 1

struct VSInput
{
    float3 Pos : POSITION;
    float3 Col : COLOR;
    float2 Tex : TEXCOORD;
};

struct PSInput
{
    float4               Pos : SV_POSITION;
    noperspective float2 Tex  : TEXCOORD;
};

#else

precision mediump float;

in vec2 TexCoord;

out vec4 FragColor;

#endif

// Shader texture inputs
#if USE_HLSL == 1

Texture2D    viewTexture : register(t0);
SamplerState viewSampler : register(s0);

#else

uniform sampler2D viewTexture;

#endif

// Global variables (uniforms for GLSL and constant buffer for HLSL)
#if USE_HLSL == 1
cbuffer LeiaSharpenShaderConstantBufferData : register(b0)
{
#endif

    //Must have 16 byte padding
    uniform float gamma;
    uniform float sharpeningCenter;
    uniform int sharpeningValueCount;
    uniform float alpha;

    uniform float4x4 rectTransform;

    uniform float4 textureInvSize;

    uniform float4 sharpeningValues[18];
    //Must have 16 byte padding

#if USE_HLSL == 1
};
#endif

float3 GammaToLinear(float3 col)
{
    return float3(pow(col.x, gamma), pow(col.y, gamma), pow(col.z, gamma));
}

float3 LinearToGamma(float3 col)
{
    float invGamma = 1.0 / gamma; // todo: pass-in invGamma instead of computing per-pixel.
    return float3(pow(col.x, invGamma), pow(col.y, invGamma), pow(col.z, invGamma));
}

float4 sampleTexture(float2 uv)
{
#if USE_HLSL == 1
    return viewTexture.Sample(viewSampler, uv);
#else
    return texture(viewTexture, uv);
#endif
}

#if USE_HLSL == 1
float4 main(PSInput input) : SV_Target0
#else
void main()
#endif
{
    float4 final_color = float4(0.0, 0.0, 0.0, 1.0);
    final_color.rgb = sharpeningCenter * GammaToLinear(sampleTexture(InTexCoord).rgb);

#if ACT_OPTIMIZED
    float coef_sum = 0.0;
    for (int index = 0; index < sharpeningValueCount/2; index++)
    {
        coef_sum += sharpeningValues[2*index].z; // calculating sum of all coefs
    }
    float2 uv1 = InTexCoord + sharpeningValues[4].xy * textureInvSize.xy; // tapping at order +3
    final_color.rgb -= coef_sum * GammaToLinear(sampleTexture(uv1).rgb);
    float2 uv2 = InTexCoord + sharpeningValues[5].xy * textureInvSize.xy; // tapping at order -3
    final_color.rgb -= coef_sum * GammaToLinear(sampleTexture(uv2).rgb);
    // NOTE: need to guard against case where we have less than 3 ACT coefs, which happens if numViews < 6 
    // NOTE: for numViews == 6 we only need to tap once with twice the coef
#else
    for (int index = 0; index < sharpeningValueCount; index++)
    {
        float2 uv = InTexCoord + sharpeningValues[index].xy * textureInvSize.xy;
        final_color.rgb -= sharpeningValues[index].z * GammaToLinear(sampleTexture(uv).rgb);
    }
#endif

    final_color.rgb = clamp(final_color.rgb, 0.0, 1.0);
    final_color.rgb = LinearToGamma(final_color.rgb);
    final_color.a = alpha;
    
    //Uncomment to do a passthrough.
    //final_color = sampleTexture(InTexCoord);

#if USE_HLSL == 1
    return final_color;
#else
    FragColor = final_color;
#endif
}